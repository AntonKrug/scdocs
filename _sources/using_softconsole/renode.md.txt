```````{jinja} scvars
{% import '_jinja/macros.html' as macros %}

# Renode emulation platform

![Renode logo](images/renode_logo.png)

Renode™ is an open-source software development framework with commercial support from Antmicro that lets you develop, debug and test multi-node device systems reliably, scalably and effectively. If all installation dependencies are met (see installation section), then the RISC-V examples can be run in the emulator.

To debug an example in the emulator Renode must be run with the Mi-V model (external tool launcher called Mi-V-Renodeemulation-platform) or PolarFire SoC MPFS (previously known as PSE, see MPFS HAL manual for more details) model and a debug launcher attaches to the running Renode (for example miv-rv32im-systick-blinky Attach-to-Renode). The debug launchers for Renode are almost identical to the launchers for real 32-bit RISC-V hardware targets except:



- Disabled/uncheck "Start OpenOCD locally" as Renode debugging does not use OpenOCD/JTAG but connects GDB directly to the Renode GDB Remote Serial Protocol interface.
  {{ macros.breadcrumb_indent('"Debugger" -> "OpenOCD Setup" -> "Start OpenOCD locally"','  ') }}

- RISC-V 32-bit targets need the following commands: 
  {{ macros.breadcrumb_indent('"Debugger" -> "GDB Client Setup" -> "Commands"','  ') }}
  Have set the architecture and symbols:
  ```{code}
set arch riscv:rv32
  ```
  ```{note}
    TODO: Add symbol file command and explain the macro
  ```

- For PolarFire SoC targets the launcher must be changed (this changed in SoftConsole 6.1).
  - The Startup -> Run/Restart Commands needs to contain the following code:
    ```{code}
monitor $COMMON_PC=`sysbus.e51 PC`
monitor runMacro $SetAllPCs
monitor start
    ```

  - Change the *e51* to *u54_1* in the code above if the connection is made to *u54_1*, change accordingly for *u54_2*, *u54_3*, and *u54_4*.

  - The {{sc}} platform script needs to be used (it’s not compatible with SoftConsole 6.1). The scripts now start the servers with the auto-start feature disabled (no “true” appended on each line)
    ```{code}
e51 StartGdbServer 3333
u54_1 StartGdbServer 3334
u54_2 StartGdbServer 3335
u54_3 StartGdbServer 3336
u54_4 StartGdbServer 3337
    ```

  - Connect to port with the correct hart, check the Port number value:
    {{ macros.breadcrumb_indent('"Debugger" -> "Remote Target" -> "Port number"','    ') }}

    | Hart | Port Number |
    | --- | --- |
    | e51 | 3333 |
    | u54_1 | 3334 |
    | u54_2 | 3335 |
    | u54_3 | 3336 |
    | u54_4 | 3337 |

  - The very first launcher will configure the platform, PCs and start execution of the code. If a second connection is required to debug another hart, then extra steps need to be followed

    - Base the second launcher by making a duplicate of the first launcher


    - In the Debugger tab:
      - Leave the **Start OpenOCD locally** unchecked
      - Select a new port to connect to (3333 to 3337 depending what hart is targeted)


    - In the Startup tab:
      - Uncheck **Initial Reset**
      - Check **Load symbols**

```````