```````{jinja} scvars
{% import '_jinja/macros.html' as macros %}

# Projects

## Creating a new project

![New project wizzard](images/wizzard-new-project.png)

## Adding source files to a project

Once the project has been created the required source files should be added.

In most cases the best way to do this is to use Libero SoC to select the relevant firmware cores (including
CMSIS/HAL, SmartFusion/SmartFusion2 MSS peripheral drivers, DirectCore drivers etc.), generate these, export
the firmware files and then import or copy them into the SoftConsole project.

In fact, for SmartFusion and SmartFusion2 is it essential that at least the `drivers_config` folder is generated
by/exported from Libero SoC and imported/copied into the SoftConsole project every time that the hardware project
is changed. This is because the files in this folder contain information about the target platform that is essential to
the correct functioning on firmware on that hardware platform.

It is also possible to generate specific firmware cores/drivers from the Firmware Catalog and then import/copy them
into the SoftConsole project.

Refer to the Libero SoC and Firmware Catalog tools and documentation for more information on
generating/exporting firmware cores from these tools.

```{warning}
Remember that any SoftConsole v3.4 workspaces or projects or SoftConsole v5.1 RISC-V projects
generated by Libero SoC or the Firmware Catalog cannot be used with SoftConsole v5.2 or later.
```

When importing/copying firmware files generated by/exported from Libero SoC or the Firmware Catalog it is safest to first manually delete all relevant folders from the SoftConsole project (e.g. `CMSIS`, `hal`, `pse_hal`, `drivers`, `drivers_config`) and retain only the custom source files created for the project itself.

Firmware folders/files can be copied by dragging and dropping from a file manager on Windows or Linux or by using
the SoftConsole import facility:

{{ macros.breadcrumb_square('"Right click on the project in the Project Explorer" -> "Import" -> "General" -> "File System" -> "click \'Next\'" -> "Browse"') }}
<br/>

And select the directory from which the firmware files are to be imported (e.g. the firmware directory below a Libero SoC project directory), select the
required folders/files and click Finish to import the files.    

## Building a project

Once a project has been correctly configured and populated with the required firmware it can be built.
The quickest way to build a project is to click the 'Hammer' icon in the SoftConsole menu toolbar.

{{ macros.breadcrumb_square('"Right click on \<YOUR_PROJECT\> in the Project Explorer" -> "Build Configurations" -> "Set Active" -> "select the required configuration"') }}
<br/>

Typical build configurations are Debug and Release, but projects can have many other configurations.

```{note}
There is big difference between the `Debug` configuration to build unoptimized binary and the `Debug` launcher to be debugging whatever the active configuration is. It's the difference between noun and verb.

It is possible:
 - To be Debuging your Debug configuraion
 - To be Running your Debug configuration
 - To be Debuging your Release configuraion
 - To be Running your Release configuration

All combinations have valid use cases. It's upto the users and their projects, but typically the Debug configuration has no optimalizations enabled, is linked to SRAM, can have some `#defines` enabled to increase verbosity of the logging features, possibly enabling some other helper features which are not required for production.

While the Release configuration can be seen as production release, linked to eNVM, enabled size/speed optimalizations and disabled all non-production features.

However there is still need to sometimes just to Run the Debug configuraion (no need to change how it's linked/oprimised), but no need to break at main and other breakpoints.

Other case is that sometimes a edge-case bug is happening and the optimised Release build has to be Debuged, which makes stepping thorugh the code not as straight forward as non-optimized variant.

Therefore the `Debug` build configuration and `Debug` launchers have to be considered as two separate concepts, which they are.

```

With the project still selected in the:

{{ macros.breadcrumb_indent('"SoftConsole Menu toolbar" -> "Run" -> "Debug Configurations" -> "Launcher for <YOUR_PROJECT>"', '   ') }}
<br/>

 Project Explorer select Project > Build Project. The results of the build process
can be viewed in the Console view and the Problems view if there are any problems (e.g. errors or warnings)

```````